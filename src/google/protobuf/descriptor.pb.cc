// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "google/protobuf/descriptor.pb.h"
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace google {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* FileDescriptorProto_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DescriptorProto_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DescriptorProto_ExtensionRange_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FieldDescriptorProto_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FieldDescriptorProto_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FieldDescriptorProto_Label_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EnumDescriptorProto_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EnumValueDescriptorProto_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ServiceDescriptorProto_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MethodDescriptorProto_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FileOptions_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FileOptions_OptimizeMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MessageOptions_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FieldOptions_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FieldOptions_CType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EnumOptions_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EnumValueOptions_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ServiceOptions_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MethodOptions_descriptor_ = NULL;

}  // namespace


void proto_BuildDescriptors_google_2fprotobuf_2fdescriptor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;
  ::google::protobuf::DescriptorPool* pool =
    ::google::protobuf::DescriptorPool::internal_generated_pool();

  const ::google::protobuf::FileDescriptor* file = pool->InternalBuildGeneratedFile(
    "\n google/protobuf/descriptor.proto\022\017goog"
    "le.protobuf\"\334\002\n\023FileDescriptorProto\022\014\n\004n"
    "ame\030\001 \001(\t\022\017\n\007package\030\002 \001(\t\022\022\n\ndependency"
    "\030\003 \003(\t\0226\n\014message_type\030\004 \003(\0132 .google.pr"
    "otobuf.DescriptorProto\0227\n\tenum_type\030\005 \003("
    "\0132$.google.protobuf.EnumDescriptorProto\022"
    "8\n\007service\030\006 \003(\0132\'.google.protobuf.Servi"
    "ceDescriptorProto\0228\n\textension\030\007 \003(\0132%.g"
    "oogle.protobuf.FieldDescriptorProto\022-\n\007o"
    "ptions\030\010 \001(\0132\034.google.protobuf.FileOptio"
    "ns\"\251\003\n\017DescriptorProto\022\014\n\004name\030\001 \001(\t\0224\n\005"
    "field\030\002 \003(\0132%.google.protobuf.FieldDescr"
    "iptorProto\0228\n\textension\030\006 \003(\0132%.google.p"
    "rotobuf.FieldDescriptorProto\0225\n\013nested_t"
    "ype\030\003 \003(\0132 .google.protobuf.DescriptorPr"
    "oto\0227\n\tenum_type\030\004 \003(\0132$.google.protobuf"
    ".EnumDescriptorProto\022H\n\017extension_range\030"
    "\005 \003(\0132/.google.protobuf.DescriptorProto."
    "ExtensionRange\0220\n\007options\030\007 \001(\0132\037.google"
    ".protobuf.MessageOptions\032,\n\016ExtensionRan"
    "ge\022\r\n\005start\030\001 \001(\005\022\013\n\003end\030\002 \001(\005\"\224\005\n\024Field"
    "DescriptorProto\022\014\n\004name\030\001 \001(\t\022\016\n\006number\030"
    "\003 \001(\005\022:\n\005label\030\004 \001(\0162+.google.protobuf.F"
    "ieldDescriptorProto.Label\0228\n\004type\030\005 \001(\0162"
    "*.google.protobuf.FieldDescriptorProto.T"
    "ype\022\021\n\ttype_name\030\006 \001(\t\022\020\n\010extendee\030\002 \001(\t"
    "\022\025\n\rdefault_value\030\007 \001(\t\022.\n\007options\030\010 \001(\013"
    "2\035.google.protobuf.FieldOptions\"\266\002\n\004Type"
    "\022\017\n\013TYPE_DOUBLE\020\001\022\016\n\nTYPE_FLOAT\020\002\022\016\n\nTYP"
    "E_INT64\020\003\022\017\n\013TYPE_UINT64\020\004\022\016\n\nTYPE_INT32"
    "\020\005\022\020\n\014TYPE_FIXED64\020\006\022\020\n\014TYPE_FIXED32\020\007\022\r"
    "\n\tTYPE_BOOL\020\010\022\017\n\013TYPE_STRING\020\t\022\016\n\nTYPE_G"
    "ROUP\020\n\022\020\n\014TYPE_MESSAGE\020\013\022\016\n\nTYPE_BYTES\020\014"
    "\022\017\n\013TYPE_UINT32\020\r\022\r\n\tTYPE_ENUM\020\016\022\021\n\rTYPE"
    "_SFIXED32\020\017\022\021\n\rTYPE_SFIXED64\020\020\022\017\n\013TYPE_S"
    "INT32\020\021\022\017\n\013TYPE_SINT64\020\022\"C\n\005Label\022\022\n\016LAB"
    "EL_OPTIONAL\020\001\022\022\n\016LABEL_REQUIRED\020\002\022\022\n\016LAB"
    "EL_REPEATED\020\003\"\214\001\n\023EnumDescriptorProto\022\014\n"
    "\004name\030\001 \001(\t\0228\n\005value\030\002 \003(\0132).google.prot"
    "obuf.EnumValueDescriptorProto\022-\n\007options"
    "\030\003 \001(\0132\034.google.protobuf.EnumOptions\"l\n\030"
    "EnumValueDescriptorProto\022\014\n\004name\030\001 \001(\t\022\016"
    "\n\006number\030\002 \001(\005\0222\n\007options\030\003 \001(\0132!.google"
    ".protobuf.EnumValueOptions\"\220\001\n\026ServiceDe"
    "scriptorProto\022\014\n\004name\030\001 \001(\t\0226\n\006method\030\002 "
    "\003(\0132&.google.protobuf.MethodDescriptorPr"
    "oto\0220\n\007options\030\003 \001(\0132\037.google.protobuf.S"
    "erviceOptions\"\177\n\025MethodDescriptorProto\022\014"
    "\n\004name\030\001 \001(\t\022\022\n\ninput_type\030\002 \001(\t\022\023\n\013outp"
    "ut_type\030\003 \001(\t\022/\n\007options\030\004 \001(\0132\036.google."
    "protobuf.MethodOptions\"\333\001\n\013FileOptions\022\024"
    "\n\014java_package\030\001 \001(\t\022\034\n\024java_outer_class"
    "name\030\010 \001(\t\022\"\n\023java_multiple_files\030\n \001(\010:"
    "\005false\022J\n\014optimize_for\030\t \001(\0162).google.pr"
    "otobuf.FileOptions.OptimizeMode:\tCODE_SI"
    "ZE\"(\n\014OptimizeMode\022\t\n\005SPEED\020\001\022\r\n\tCODE_SI"
    "ZE\020\002\"8\n\016MessageOptions\022&\n\027message_set_wi"
    "re_format\030\001 \001(\010:\005false\"\205\001\n\014FieldOptions\022"
    "2\n\005ctype\030\001 \001(\0162#.google.protobuf.FieldOp"
    "tions.CType\022\034\n\024experimental_map_key\030\t \001("
    "\t\"#\n\005CType\022\010\n\004CORD\020\001\022\020\n\014STRING_PIECE\020\002\"\r"
    "\n\013EnumOptions\"\022\n\020EnumValueOptions\"\020\n\016Ser"
    "viceOptions\"\017\n\rMethodOptionsB)\n\023com.goog"
    "le.protobufB\020DescriptorProtosH\001", 2551);
  FileDescriptorProto_descriptor_ = file->message_type(0);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileDescriptorProto_descriptor_, &FileDescriptorProto::default_instance());
  DescriptorProto_descriptor_ = file->message_type(1);
  DescriptorProto_ExtensionRange_descriptor_ = DescriptorProto_descriptor_->nested_type(0);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DescriptorProto_ExtensionRange_descriptor_, &DescriptorProto_ExtensionRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DescriptorProto_descriptor_, &DescriptorProto::default_instance());
  FieldDescriptorProto_descriptor_ = file->message_type(2);
  FieldDescriptorProto_Type_descriptor_ = FieldDescriptorProto_descriptor_->enum_type(0);
  FieldDescriptorProto_Label_descriptor_ = FieldDescriptorProto_descriptor_->enum_type(1);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FieldDescriptorProto_descriptor_, &FieldDescriptorProto::default_instance());
  EnumDescriptorProto_descriptor_ = file->message_type(3);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnumDescriptorProto_descriptor_, &EnumDescriptorProto::default_instance());
  EnumValueDescriptorProto_descriptor_ = file->message_type(4);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnumValueDescriptorProto_descriptor_, &EnumValueDescriptorProto::default_instance());
  ServiceDescriptorProto_descriptor_ = file->message_type(5);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceDescriptorProto_descriptor_, &ServiceDescriptorProto::default_instance());
  MethodDescriptorProto_descriptor_ = file->message_type(6);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MethodDescriptorProto_descriptor_, &MethodDescriptorProto::default_instance());
  FileOptions_descriptor_ = file->message_type(7);
  FileOptions_OptimizeMode_descriptor_ = FileOptions_descriptor_->enum_type(0);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileOptions_descriptor_, &FileOptions::default_instance());
  MessageOptions_descriptor_ = file->message_type(8);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageOptions_descriptor_, &MessageOptions::default_instance());
  FieldOptions_descriptor_ = file->message_type(9);
  FieldOptions_CType_descriptor_ = FieldOptions_descriptor_->enum_type(0);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FieldOptions_descriptor_, &FieldOptions::default_instance());
  EnumOptions_descriptor_ = file->message_type(10);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnumOptions_descriptor_, &EnumOptions::default_instance());
  EnumValueOptions_descriptor_ = file->message_type(11);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnumValueOptions_descriptor_, &EnumValueOptions::default_instance());
  ServiceOptions_descriptor_ = file->message_type(12);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceOptions_descriptor_, &ServiceOptions::default_instance());
  MethodOptions_descriptor_ = file->message_type(13);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MethodOptions_descriptor_, &MethodOptions::default_instance());
}

// Force BuildDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fprotobuf_2fdescriptor_2eproto {
  StaticDescriptorInitializer_google_2fprotobuf_2fdescriptor_2eproto() {
    proto_BuildDescriptors_google_2fprotobuf_2fdescriptor_2eproto();
  }
} static_descriptor_initializer_google_2fprotobuf_2fdescriptor_2eproto_;


// ===================================================================

const FileDescriptorProto FileDescriptorProto::default_instance_;

const ::std::string FileDescriptorProto::_default_name_;
const ::std::string FileDescriptorProto::_default_package_;






const int FileDescriptorProto::_offsets_[8] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileDescriptorProto, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileDescriptorProto, package_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileDescriptorProto, dependency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileDescriptorProto, message_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileDescriptorProto, enum_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileDescriptorProto, service_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileDescriptorProto, extension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileDescriptorProto, options_),
};

FileDescriptorProto::FileDescriptorProto()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    name_(const_cast< ::std::string*>(&_default_name_)),
    package_(const_cast< ::std::string*>(&_default_package_)),
    options_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
    options_ = const_cast< ::google::protobuf::FileOptions*>(&::google::protobuf::FileOptions::default_instance());
  }
}

FileDescriptorProto::FileDescriptorProto(const FileDescriptorProto& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    name_(const_cast< ::std::string*>(&_default_name_)),
    package_(const_cast< ::std::string*>(&_default_package_)),
    options_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

FileDescriptorProto::~FileDescriptorProto() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (package_ != &_default_package_) {
    delete package_;
  }
  if (this != &default_instance_) {
    delete options_;
  }
}

const ::google::protobuf::Descriptor* FileDescriptorProto::descriptor() {
  if (FileDescriptorProto_descriptor_ == NULL) proto_BuildDescriptors_google_2fprotobuf_2fdescriptor_2eproto();
  return FileDescriptorProto_descriptor_;
}

FileDescriptorProto* FileDescriptorProto::New() const {
  return new FileDescriptorProto;
}

void FileDescriptorProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (package_ != &_default_package_) {
        package_->clear();
      }
    }
    if (_has_bit(7)) {
      if (options_ != NULL) options_->::google::protobuf::FileOptions::Clear();
    }
  }
  dependency_.Clear();
  message_type_.Clear();
  enum_type_.Clear();
  service_.Clear();
  extension_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileDescriptorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(18)) goto parse_package;
        break;
      }
      
      // optional string package = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_package:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_package()));
        if (input->ExpectTag(26)) goto parse_dependency;
        break;
      }
      
      // repeated string dependency = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_dependency:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_dependency()));
        if (input->ExpectTag(26)) goto parse_dependency;
        if (input->ExpectTag(34)) goto parse_message_type;
        break;
      }
      
      // repeated .google.protobuf.DescriptorProto message_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_message_type:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_message_type()));
        if (input->ExpectTag(34)) goto parse_message_type;
        if (input->ExpectTag(42)) goto parse_enum_type;
        break;
      }
      
      // repeated .google.protobuf.EnumDescriptorProto enum_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_enum_type:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_enum_type()));
        if (input->ExpectTag(42)) goto parse_enum_type;
        if (input->ExpectTag(50)) goto parse_service;
        break;
      }
      
      // repeated .google.protobuf.ServiceDescriptorProto service = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_service:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_service()));
        if (input->ExpectTag(50)) goto parse_service;
        if (input->ExpectTag(58)) goto parse_extension;
        break;
      }
      
      // repeated .google.protobuf.FieldDescriptorProto extension = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_extension:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_extension()));
        if (input->ExpectTag(58)) goto parse_extension;
        if (input->ExpectTag(66)) goto parse_options;
        break;
      }
      
      // optional .google.protobuf.FileOptions options = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_options:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_options()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

bool FileDescriptorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  // optional string name = 1;
  if (_has_bit(0)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(1, this->name(), output));
  }
  
  // optional string package = 2;
  if (_has_bit(1)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(2, this->package(), output));
  }
  
  // repeated string dependency = 3;
  for (int i = 0; i < dependency_.size(); i++) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(3, this->dependency(i), output));
  }
  
  // repeated .google.protobuf.DescriptorProto message_type = 4;
  for (int i = 0; i < message_type_.size(); i++) {
    DO_(::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->message_type(i), output));
  }
  
  // repeated .google.protobuf.EnumDescriptorProto enum_type = 5;
  for (int i = 0; i < enum_type_.size(); i++) {
    DO_(::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->enum_type(i), output));
  }
  
  // repeated .google.protobuf.ServiceDescriptorProto service = 6;
  for (int i = 0; i < service_.size(); i++) {
    DO_(::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->service(i), output));
  }
  
  // repeated .google.protobuf.FieldDescriptorProto extension = 7;
  for (int i = 0; i < extension_.size(); i++) {
    DO_(::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(7, this->extension(i), output));
  }
  
  // optional .google.protobuf.FileOptions options = 8;
  if (_has_bit(7)) {
    DO_(::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(8, this->options(), output));
  }
  
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int FileDescriptorProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional string package = 2;
    if (has_package()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->package());
    }
    
    // optional .google.protobuf.FileOptions options = 8;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->options());
    }
    
  }
  // repeated string dependency = 3;
  total_size += 1 * dependency_size();
  for (int i = 0; i < dependency_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->dependency(i));
  }
  
  // repeated .google.protobuf.DescriptorProto message_type = 4;
  total_size += 1 * message_type_size();
  for (int i = 0; i < message_type_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->message_type(i));
  }
  
  // repeated .google.protobuf.EnumDescriptorProto enum_type = 5;
  total_size += 1 * enum_type_size();
  for (int i = 0; i < enum_type_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->enum_type(i));
  }
  
  // repeated .google.protobuf.ServiceDescriptorProto service = 6;
  total_size += 1 * service_size();
  for (int i = 0; i < service_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->service(i));
  }
  
  // repeated .google.protobuf.FieldDescriptorProto extension = 7;
  total_size += 1 * extension_size();
  for (int i = 0; i < extension_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->extension(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void FileDescriptorProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileDescriptorProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileDescriptorProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(
      descriptor(), *from.GetReflection(), &_reflection_);
  } else {
    MergeFrom(*source);
  }
}

void FileDescriptorProto::MergeFrom(const FileDescriptorProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  dependency_.MergeFrom(from.dependency_);
  message_type_.MergeFrom(from.message_type_);
  enum_type_.MergeFrom(from.enum_type_);
  service_.MergeFrom(from.service_);
  extension_.MergeFrom(from.extension_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_package(from.package());
    }
    if (from._has_bit(7)) {
      mutable_options()->::google::protobuf::FileOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileDescriptorProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileDescriptorProto::CopyFrom(const FileDescriptorProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileDescriptorProto::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* FileDescriptorProto::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
FileDescriptorProto::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* FileDescriptorProto::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const DescriptorProto_ExtensionRange DescriptorProto_ExtensionRange::default_instance_;



const int DescriptorProto_ExtensionRange::_offsets_[2] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto_ExtensionRange, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto_ExtensionRange, end_),
};

DescriptorProto_ExtensionRange::DescriptorProto_ExtensionRange()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    start_(0),
    end_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

DescriptorProto_ExtensionRange::DescriptorProto_ExtensionRange(const DescriptorProto_ExtensionRange& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    start_(0),
    end_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

DescriptorProto_ExtensionRange::~DescriptorProto_ExtensionRange() {
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DescriptorProto_ExtensionRange::descriptor() {
  if (DescriptorProto_ExtensionRange_descriptor_ == NULL) proto_BuildDescriptors_google_2fprotobuf_2fdescriptor_2eproto();
  return DescriptorProto_ExtensionRange_descriptor_;
}

DescriptorProto_ExtensionRange* DescriptorProto_ExtensionRange::New() const {
  return new DescriptorProto_ExtensionRange;
}

void DescriptorProto_ExtensionRange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_ = 0;
    end_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DescriptorProto_ExtensionRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 start = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &start_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_end;
        break;
      }
      
      // optional int32 end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_end:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &end_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

bool DescriptorProto_ExtensionRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  // optional int32 start = 1;
  if (_has_bit(0)) {
    DO_(::google::protobuf::internal::WireFormat::WriteInt32(1, this->start(), output));
  }
  
  // optional int32 end = 2;
  if (_has_bit(1)) {
    DO_(::google::protobuf::internal::WireFormat::WriteInt32(2, this->end(), output));
  }
  
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int DescriptorProto_ExtensionRange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->start());
    }
    
    // optional int32 end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->end());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DescriptorProto_ExtensionRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DescriptorProto_ExtensionRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DescriptorProto_ExtensionRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(
      descriptor(), *from.GetReflection(), &_reflection_);
  } else {
    MergeFrom(*source);
  }
}

void DescriptorProto_ExtensionRange::MergeFrom(const DescriptorProto_ExtensionRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_start(from.start());
    }
    if (from._has_bit(1)) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DescriptorProto_ExtensionRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescriptorProto_ExtensionRange::CopyFrom(const DescriptorProto_ExtensionRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescriptorProto_ExtensionRange::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* DescriptorProto_ExtensionRange::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
DescriptorProto_ExtensionRange::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* DescriptorProto_ExtensionRange::GetReflection() {
  return &_reflection_;
}

// -------------------------------------------------------------------

const DescriptorProto DescriptorProto::default_instance_;

const ::std::string DescriptorProto::_default_name_;






const int DescriptorProto::_offsets_[7] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto, extension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto, nested_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto, enum_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto, extension_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto, options_),
};

DescriptorProto::DescriptorProto()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    name_(const_cast< ::std::string*>(&_default_name_)),
    options_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
    options_ = const_cast< ::google::protobuf::MessageOptions*>(&::google::protobuf::MessageOptions::default_instance());
  }
}

DescriptorProto::DescriptorProto(const DescriptorProto& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    name_(const_cast< ::std::string*>(&_default_name_)),
    options_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

DescriptorProto::~DescriptorProto() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != &default_instance_) {
    delete options_;
  }
}

const ::google::protobuf::Descriptor* DescriptorProto::descriptor() {
  if (DescriptorProto_descriptor_ == NULL) proto_BuildDescriptors_google_2fprotobuf_2fdescriptor_2eproto();
  return DescriptorProto_descriptor_;
}

DescriptorProto* DescriptorProto::New() const {
  return new DescriptorProto;
}

void DescriptorProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(6)) {
      if (options_ != NULL) options_->::google::protobuf::MessageOptions::Clear();
    }
  }
  field_.Clear();
  extension_.Clear();
  nested_type_.Clear();
  enum_type_.Clear();
  extension_range_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DescriptorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(18)) goto parse_field;
        break;
      }
      
      // repeated .google.protobuf.FieldDescriptorProto field = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_field:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_field()));
        if (input->ExpectTag(18)) goto parse_field;
        if (input->ExpectTag(26)) goto parse_nested_type;
        break;
      }
      
      // repeated .google.protobuf.DescriptorProto nested_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_nested_type:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_nested_type()));
        if (input->ExpectTag(26)) goto parse_nested_type;
        if (input->ExpectTag(34)) goto parse_enum_type;
        break;
      }
      
      // repeated .google.protobuf.EnumDescriptorProto enum_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_enum_type:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_enum_type()));
        if (input->ExpectTag(34)) goto parse_enum_type;
        if (input->ExpectTag(42)) goto parse_extension_range;
        break;
      }
      
      // repeated .google.protobuf.DescriptorProto.ExtensionRange extension_range = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_extension_range:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_extension_range()));
        if (input->ExpectTag(42)) goto parse_extension_range;
        if (input->ExpectTag(50)) goto parse_extension;
        break;
      }
      
      // repeated .google.protobuf.FieldDescriptorProto extension = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_extension:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_extension()));
        if (input->ExpectTag(50)) goto parse_extension;
        if (input->ExpectTag(58)) goto parse_options;
        break;
      }
      
      // optional .google.protobuf.MessageOptions options = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_options:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_options()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

bool DescriptorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  // optional string name = 1;
  if (_has_bit(0)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(1, this->name(), output));
  }
  
  // repeated .google.protobuf.FieldDescriptorProto field = 2;
  for (int i = 0; i < field_.size(); i++) {
    DO_(::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->field(i), output));
  }
  
  // repeated .google.protobuf.DescriptorProto nested_type = 3;
  for (int i = 0; i < nested_type_.size(); i++) {
    DO_(::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->nested_type(i), output));
  }
  
  // repeated .google.protobuf.EnumDescriptorProto enum_type = 4;
  for (int i = 0; i < enum_type_.size(); i++) {
    DO_(::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->enum_type(i), output));
  }
  
  // repeated .google.protobuf.DescriptorProto.ExtensionRange extension_range = 5;
  for (int i = 0; i < extension_range_.size(); i++) {
    DO_(::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->extension_range(i), output));
  }
  
  // repeated .google.protobuf.FieldDescriptorProto extension = 6;
  for (int i = 0; i < extension_.size(); i++) {
    DO_(::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->extension(i), output));
  }
  
  // optional .google.protobuf.MessageOptions options = 7;
  if (_has_bit(6)) {
    DO_(::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(7, this->options(), output));
  }
  
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int DescriptorProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional .google.protobuf.MessageOptions options = 7;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->options());
    }
    
  }
  // repeated .google.protobuf.FieldDescriptorProto field = 2;
  total_size += 1 * field_size();
  for (int i = 0; i < field_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->field(i));
  }
  
  // repeated .google.protobuf.FieldDescriptorProto extension = 6;
  total_size += 1 * extension_size();
  for (int i = 0; i < extension_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->extension(i));
  }
  
  // repeated .google.protobuf.DescriptorProto nested_type = 3;
  total_size += 1 * nested_type_size();
  for (int i = 0; i < nested_type_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->nested_type(i));
  }
  
  // repeated .google.protobuf.EnumDescriptorProto enum_type = 4;
  total_size += 1 * enum_type_size();
  for (int i = 0; i < enum_type_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->enum_type(i));
  }
  
  // repeated .google.protobuf.DescriptorProto.ExtensionRange extension_range = 5;
  total_size += 1 * extension_range_size();
  for (int i = 0; i < extension_range_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->extension_range(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DescriptorProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DescriptorProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DescriptorProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(
      descriptor(), *from.GetReflection(), &_reflection_);
  } else {
    MergeFrom(*source);
  }
}

void DescriptorProto::MergeFrom(const DescriptorProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  field_.MergeFrom(from.field_);
  extension_.MergeFrom(from.extension_);
  nested_type_.MergeFrom(from.nested_type_);
  enum_type_.MergeFrom(from.enum_type_);
  extension_range_.MergeFrom(from.extension_range_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(6)) {
      mutable_options()->::google::protobuf::MessageOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DescriptorProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescriptorProto::CopyFrom(const DescriptorProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescriptorProto::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* DescriptorProto::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
DescriptorProto::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* DescriptorProto::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const ::google::protobuf::EnumDescriptor* FieldDescriptorProto_Type_descriptor() {
  if (FieldDescriptorProto_Type_descriptor_ == NULL) proto_BuildDescriptors_google_2fprotobuf_2fdescriptor_2eproto();
  return FieldDescriptorProto_Type_descriptor_;
}
bool FieldDescriptorProto_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FieldDescriptorProto_Type FieldDescriptorProto::TYPE_DOUBLE;
const FieldDescriptorProto_Type FieldDescriptorProto::TYPE_FLOAT;
const FieldDescriptorProto_Type FieldDescriptorProto::TYPE_INT64;
const FieldDescriptorProto_Type FieldDescriptorProto::TYPE_UINT64;
const FieldDescriptorProto_Type FieldDescriptorProto::TYPE_INT32;
const FieldDescriptorProto_Type FieldDescriptorProto::TYPE_FIXED64;
const FieldDescriptorProto_Type FieldDescriptorProto::TYPE_FIXED32;
const FieldDescriptorProto_Type FieldDescriptorProto::TYPE_BOOL;
const FieldDescriptorProto_Type FieldDescriptorProto::TYPE_STRING;
const FieldDescriptorProto_Type FieldDescriptorProto::TYPE_GROUP;
const FieldDescriptorProto_Type FieldDescriptorProto::TYPE_MESSAGE;
const FieldDescriptorProto_Type FieldDescriptorProto::TYPE_BYTES;
const FieldDescriptorProto_Type FieldDescriptorProto::TYPE_UINT32;
const FieldDescriptorProto_Type FieldDescriptorProto::TYPE_ENUM;
const FieldDescriptorProto_Type FieldDescriptorProto::TYPE_SFIXED32;
const FieldDescriptorProto_Type FieldDescriptorProto::TYPE_SFIXED64;
const FieldDescriptorProto_Type FieldDescriptorProto::TYPE_SINT32;
const FieldDescriptorProto_Type FieldDescriptorProto::TYPE_SINT64;
const FieldDescriptorProto_Type FieldDescriptorProto::Type_MIN;
const FieldDescriptorProto_Type FieldDescriptorProto::Type_MAX;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* FieldDescriptorProto_Label_descriptor() {
  if (FieldDescriptorProto_Label_descriptor_ == NULL) proto_BuildDescriptors_google_2fprotobuf_2fdescriptor_2eproto();
  return FieldDescriptorProto_Label_descriptor_;
}
bool FieldDescriptorProto_Label_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FieldDescriptorProto_Label FieldDescriptorProto::LABEL_OPTIONAL;
const FieldDescriptorProto_Label FieldDescriptorProto::LABEL_REQUIRED;
const FieldDescriptorProto_Label FieldDescriptorProto::LABEL_REPEATED;
const FieldDescriptorProto_Label FieldDescriptorProto::Label_MIN;
const FieldDescriptorProto_Label FieldDescriptorProto::Label_MAX;
#endif  // _MSC_VER
const FieldDescriptorProto FieldDescriptorProto::default_instance_;

const ::std::string FieldDescriptorProto::_default_name_;



const ::std::string FieldDescriptorProto::_default_type_name_;
const ::std::string FieldDescriptorProto::_default_extendee_;
const ::std::string FieldDescriptorProto::_default_default_value_;

const int FieldDescriptorProto::_offsets_[8] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldDescriptorProto, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldDescriptorProto, number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldDescriptorProto, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldDescriptorProto, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldDescriptorProto, type_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldDescriptorProto, extendee_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldDescriptorProto, default_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldDescriptorProto, options_),
};

FieldDescriptorProto::FieldDescriptorProto()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    name_(const_cast< ::std::string*>(&_default_name_)),
    number_(0),
    label_(1),
    type_(1),
    type_name_(const_cast< ::std::string*>(&_default_type_name_)),
    extendee_(const_cast< ::std::string*>(&_default_extendee_)),
    default_value_(const_cast< ::std::string*>(&_default_default_value_)),
    options_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
    options_ = const_cast< ::google::protobuf::FieldOptions*>(&::google::protobuf::FieldOptions::default_instance());
  }
}

FieldDescriptorProto::FieldDescriptorProto(const FieldDescriptorProto& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    name_(const_cast< ::std::string*>(&_default_name_)),
    number_(0),
    label_(1),
    type_(1),
    type_name_(const_cast< ::std::string*>(&_default_type_name_)),
    extendee_(const_cast< ::std::string*>(&_default_extendee_)),
    default_value_(const_cast< ::std::string*>(&_default_default_value_)),
    options_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

FieldDescriptorProto::~FieldDescriptorProto() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (type_name_ != &_default_type_name_) {
    delete type_name_;
  }
  if (extendee_ != &_default_extendee_) {
    delete extendee_;
  }
  if (default_value_ != &_default_default_value_) {
    delete default_value_;
  }
  if (this != &default_instance_) {
    delete options_;
  }
}

const ::google::protobuf::Descriptor* FieldDescriptorProto::descriptor() {
  if (FieldDescriptorProto_descriptor_ == NULL) proto_BuildDescriptors_google_2fprotobuf_2fdescriptor_2eproto();
  return FieldDescriptorProto_descriptor_;
}

FieldDescriptorProto* FieldDescriptorProto::New() const {
  return new FieldDescriptorProto;
}

void FieldDescriptorProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    number_ = 0;
    label_ = 1;
    type_ = 1;
    if (_has_bit(4)) {
      if (type_name_ != &_default_type_name_) {
        type_name_->clear();
      }
    }
    if (_has_bit(5)) {
      if (extendee_ != &_default_extendee_) {
        extendee_->clear();
      }
    }
    if (_has_bit(6)) {
      if (default_value_ != &_default_default_value_) {
        default_value_->clear();
      }
    }
    if (_has_bit(7)) {
      if (options_ != NULL) options_->::google::protobuf::FieldOptions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FieldDescriptorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(18)) goto parse_extendee;
        break;
      }
      
      // optional string extendee = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_extendee:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_extendee()));
        if (input->ExpectTag(24)) goto parse_number;
        break;
      }
      
      // optional int32 number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_number:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &number_));
        _set_bit(1);
        if (input->ExpectTag(32)) goto parse_label;
        break;
      }
      
      // optional .google.protobuf.FieldDescriptorProto.Label label = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_label:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (::google::protobuf::FieldDescriptorProto_Label_IsValid(value)) {
          set_label(static_cast< ::google::protobuf::FieldDescriptorProto_Label >(value));
        } else {
          mutable_unknown_fields()->AddField(4)->add_varint(value);
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // optional .google.protobuf.FieldDescriptorProto.Type type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (::google::protobuf::FieldDescriptorProto_Type_IsValid(value)) {
          set_type(static_cast< ::google::protobuf::FieldDescriptorProto_Type >(value));
        } else {
          mutable_unknown_fields()->AddField(5)->add_varint(value);
        }
        if (input->ExpectTag(50)) goto parse_type_name;
        break;
      }
      
      // optional string type_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_type_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_type_name()));
        if (input->ExpectTag(58)) goto parse_default_value;
        break;
      }
      
      // optional string default_value = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_default_value:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_default_value()));
        if (input->ExpectTag(66)) goto parse_options;
        break;
      }
      
      // optional .google.protobuf.FieldOptions options = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_options:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_options()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

bool FieldDescriptorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  // optional string name = 1;
  if (_has_bit(0)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(1, this->name(), output));
  }
  
  // optional string extendee = 2;
  if (_has_bit(5)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(2, this->extendee(), output));
  }
  
  // optional int32 number = 3;
  if (_has_bit(1)) {
    DO_(::google::protobuf::internal::WireFormat::WriteInt32(3, this->number(), output));
  }
  
  // optional .google.protobuf.FieldDescriptorProto.Label label = 4;
  if (_has_bit(2)) {
    DO_(::google::protobuf::internal::WireFormat::WriteEnum(4, this->label(), output));
  }
  
  // optional .google.protobuf.FieldDescriptorProto.Type type = 5;
  if (_has_bit(3)) {
    DO_(::google::protobuf::internal::WireFormat::WriteEnum(5, this->type(), output));
  }
  
  // optional string type_name = 6;
  if (_has_bit(4)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(6, this->type_name(), output));
  }
  
  // optional string default_value = 7;
  if (_has_bit(6)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(7, this->default_value(), output));
  }
  
  // optional .google.protobuf.FieldOptions options = 8;
  if (_has_bit(7)) {
    DO_(::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(8, this->options(), output));
  }
  
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int FieldDescriptorProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional int32 number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->number());
    }
    
    // optional .google.protobuf.FieldDescriptorProto.Label label = 4;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->label());
    }
    
    // optional .google.protobuf.FieldDescriptorProto.Type type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->type());
    }
    
    // optional string type_name = 6;
    if (has_type_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->type_name());
    }
    
    // optional string extendee = 2;
    if (has_extendee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->extendee());
    }
    
    // optional string default_value = 7;
    if (has_default_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->default_value());
    }
    
    // optional .google.protobuf.FieldOptions options = 8;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->options());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void FieldDescriptorProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FieldDescriptorProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FieldDescriptorProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(
      descriptor(), *from.GetReflection(), &_reflection_);
  } else {
    MergeFrom(*source);
  }
}

void FieldDescriptorProto::MergeFrom(const FieldDescriptorProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_number(from.number());
    }
    if (from._has_bit(2)) {
      set_label(from.label());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
    if (from._has_bit(4)) {
      set_type_name(from.type_name());
    }
    if (from._has_bit(5)) {
      set_extendee(from.extendee());
    }
    if (from._has_bit(6)) {
      set_default_value(from.default_value());
    }
    if (from._has_bit(7)) {
      mutable_options()->::google::protobuf::FieldOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FieldDescriptorProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldDescriptorProto::CopyFrom(const FieldDescriptorProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldDescriptorProto::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* FieldDescriptorProto::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
FieldDescriptorProto::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* FieldDescriptorProto::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const EnumDescriptorProto EnumDescriptorProto::default_instance_;

const ::std::string EnumDescriptorProto::_default_name_;


const int EnumDescriptorProto::_offsets_[3] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumDescriptorProto, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumDescriptorProto, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumDescriptorProto, options_),
};

EnumDescriptorProto::EnumDescriptorProto()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    name_(const_cast< ::std::string*>(&_default_name_)),
    options_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
    options_ = const_cast< ::google::protobuf::EnumOptions*>(&::google::protobuf::EnumOptions::default_instance());
  }
}

EnumDescriptorProto::EnumDescriptorProto(const EnumDescriptorProto& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    name_(const_cast< ::std::string*>(&_default_name_)),
    options_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

EnumDescriptorProto::~EnumDescriptorProto() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != &default_instance_) {
    delete options_;
  }
}

const ::google::protobuf::Descriptor* EnumDescriptorProto::descriptor() {
  if (EnumDescriptorProto_descriptor_ == NULL) proto_BuildDescriptors_google_2fprotobuf_2fdescriptor_2eproto();
  return EnumDescriptorProto_descriptor_;
}

EnumDescriptorProto* EnumDescriptorProto::New() const {
  return new EnumDescriptorProto;
}

void EnumDescriptorProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (options_ != NULL) options_->::google::protobuf::EnumOptions::Clear();
    }
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnumDescriptorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // repeated .google.protobuf.EnumValueDescriptorProto value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_value:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_value()));
        if (input->ExpectTag(18)) goto parse_value;
        if (input->ExpectTag(26)) goto parse_options;
        break;
      }
      
      // optional .google.protobuf.EnumOptions options = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_options:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_options()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

bool EnumDescriptorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  // optional string name = 1;
  if (_has_bit(0)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(1, this->name(), output));
  }
  
  // repeated .google.protobuf.EnumValueDescriptorProto value = 2;
  for (int i = 0; i < value_.size(); i++) {
    DO_(::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->value(i), output));
  }
  
  // optional .google.protobuf.EnumOptions options = 3;
  if (_has_bit(2)) {
    DO_(::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->options(), output));
  }
  
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int EnumDescriptorProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional .google.protobuf.EnumOptions options = 3;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->options());
    }
    
  }
  // repeated .google.protobuf.EnumValueDescriptorProto value = 2;
  total_size += 1 * value_size();
  for (int i = 0; i < value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->value(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void EnumDescriptorProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnumDescriptorProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnumDescriptorProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(
      descriptor(), *from.GetReflection(), &_reflection_);
  } else {
    MergeFrom(*source);
  }
}

void EnumDescriptorProto::MergeFrom(const EnumDescriptorProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      mutable_options()->::google::protobuf::EnumOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnumDescriptorProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnumDescriptorProto::CopyFrom(const EnumDescriptorProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnumDescriptorProto::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* EnumDescriptorProto::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
EnumDescriptorProto::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* EnumDescriptorProto::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const EnumValueDescriptorProto EnumValueDescriptorProto::default_instance_;

const ::std::string EnumValueDescriptorProto::_default_name_;


const int EnumValueDescriptorProto::_offsets_[3] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumValueDescriptorProto, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumValueDescriptorProto, number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumValueDescriptorProto, options_),
};

EnumValueDescriptorProto::EnumValueDescriptorProto()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    name_(const_cast< ::std::string*>(&_default_name_)),
    number_(0),
    options_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
    options_ = const_cast< ::google::protobuf::EnumValueOptions*>(&::google::protobuf::EnumValueOptions::default_instance());
  }
}

EnumValueDescriptorProto::EnumValueDescriptorProto(const EnumValueDescriptorProto& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    name_(const_cast< ::std::string*>(&_default_name_)),
    number_(0),
    options_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

EnumValueDescriptorProto::~EnumValueDescriptorProto() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != &default_instance_) {
    delete options_;
  }
}

const ::google::protobuf::Descriptor* EnumValueDescriptorProto::descriptor() {
  if (EnumValueDescriptorProto_descriptor_ == NULL) proto_BuildDescriptors_google_2fprotobuf_2fdescriptor_2eproto();
  return EnumValueDescriptorProto_descriptor_;
}

EnumValueDescriptorProto* EnumValueDescriptorProto::New() const {
  return new EnumValueDescriptorProto;
}

void EnumValueDescriptorProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    number_ = 0;
    if (_has_bit(2)) {
      if (options_ != NULL) options_->::google::protobuf::EnumValueOptions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnumValueDescriptorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }
      
      // optional int32 number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_number:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &number_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_options;
        break;
      }
      
      // optional .google.protobuf.EnumValueOptions options = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_options:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_options()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

bool EnumValueDescriptorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  // optional string name = 1;
  if (_has_bit(0)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(1, this->name(), output));
  }
  
  // optional int32 number = 2;
  if (_has_bit(1)) {
    DO_(::google::protobuf::internal::WireFormat::WriteInt32(2, this->number(), output));
  }
  
  // optional .google.protobuf.EnumValueOptions options = 3;
  if (_has_bit(2)) {
    DO_(::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->options(), output));
  }
  
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int EnumValueDescriptorProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional int32 number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->number());
    }
    
    // optional .google.protobuf.EnumValueOptions options = 3;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->options());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void EnumValueDescriptorProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnumValueDescriptorProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnumValueDescriptorProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(
      descriptor(), *from.GetReflection(), &_reflection_);
  } else {
    MergeFrom(*source);
  }
}

void EnumValueDescriptorProto::MergeFrom(const EnumValueDescriptorProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_number(from.number());
    }
    if (from._has_bit(2)) {
      mutable_options()->::google::protobuf::EnumValueOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnumValueDescriptorProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnumValueDescriptorProto::CopyFrom(const EnumValueDescriptorProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnumValueDescriptorProto::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* EnumValueDescriptorProto::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
EnumValueDescriptorProto::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* EnumValueDescriptorProto::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const ServiceDescriptorProto ServiceDescriptorProto::default_instance_;

const ::std::string ServiceDescriptorProto::_default_name_;


const int ServiceDescriptorProto::_offsets_[3] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDescriptorProto, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDescriptorProto, method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDescriptorProto, options_),
};

ServiceDescriptorProto::ServiceDescriptorProto()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    name_(const_cast< ::std::string*>(&_default_name_)),
    options_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
    options_ = const_cast< ::google::protobuf::ServiceOptions*>(&::google::protobuf::ServiceOptions::default_instance());
  }
}

ServiceDescriptorProto::ServiceDescriptorProto(const ServiceDescriptorProto& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    name_(const_cast< ::std::string*>(&_default_name_)),
    options_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

ServiceDescriptorProto::~ServiceDescriptorProto() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != &default_instance_) {
    delete options_;
  }
}

const ::google::protobuf::Descriptor* ServiceDescriptorProto::descriptor() {
  if (ServiceDescriptorProto_descriptor_ == NULL) proto_BuildDescriptors_google_2fprotobuf_2fdescriptor_2eproto();
  return ServiceDescriptorProto_descriptor_;
}

ServiceDescriptorProto* ServiceDescriptorProto::New() const {
  return new ServiceDescriptorProto;
}

void ServiceDescriptorProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (options_ != NULL) options_->::google::protobuf::ServiceOptions::Clear();
    }
  }
  method_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceDescriptorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(18)) goto parse_method;
        break;
      }
      
      // repeated .google.protobuf.MethodDescriptorProto method = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_method:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_method()));
        if (input->ExpectTag(18)) goto parse_method;
        if (input->ExpectTag(26)) goto parse_options;
        break;
      }
      
      // optional .google.protobuf.ServiceOptions options = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_options:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_options()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

bool ServiceDescriptorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  // optional string name = 1;
  if (_has_bit(0)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(1, this->name(), output));
  }
  
  // repeated .google.protobuf.MethodDescriptorProto method = 2;
  for (int i = 0; i < method_.size(); i++) {
    DO_(::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->method(i), output));
  }
  
  // optional .google.protobuf.ServiceOptions options = 3;
  if (_has_bit(2)) {
    DO_(::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->options(), output));
  }
  
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int ServiceDescriptorProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional .google.protobuf.ServiceOptions options = 3;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->options());
    }
    
  }
  // repeated .google.protobuf.MethodDescriptorProto method = 2;
  total_size += 1 * method_size();
  for (int i = 0; i < method_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->method(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ServiceDescriptorProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceDescriptorProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceDescriptorProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(
      descriptor(), *from.GetReflection(), &_reflection_);
  } else {
    MergeFrom(*source);
  }
}

void ServiceDescriptorProto::MergeFrom(const ServiceDescriptorProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  method_.MergeFrom(from.method_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      mutable_options()->::google::protobuf::ServiceOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceDescriptorProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceDescriptorProto::CopyFrom(const ServiceDescriptorProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceDescriptorProto::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* ServiceDescriptorProto::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
ServiceDescriptorProto::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* ServiceDescriptorProto::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const MethodDescriptorProto MethodDescriptorProto::default_instance_;

const ::std::string MethodDescriptorProto::_default_name_;
const ::std::string MethodDescriptorProto::_default_input_type_;
const ::std::string MethodDescriptorProto::_default_output_type_;

const int MethodDescriptorProto::_offsets_[4] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodDescriptorProto, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodDescriptorProto, input_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodDescriptorProto, output_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodDescriptorProto, options_),
};

MethodDescriptorProto::MethodDescriptorProto()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    name_(const_cast< ::std::string*>(&_default_name_)),
    input_type_(const_cast< ::std::string*>(&_default_input_type_)),
    output_type_(const_cast< ::std::string*>(&_default_output_type_)),
    options_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
    options_ = const_cast< ::google::protobuf::MethodOptions*>(&::google::protobuf::MethodOptions::default_instance());
  }
}

MethodDescriptorProto::MethodDescriptorProto(const MethodDescriptorProto& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    name_(const_cast< ::std::string*>(&_default_name_)),
    input_type_(const_cast< ::std::string*>(&_default_input_type_)),
    output_type_(const_cast< ::std::string*>(&_default_output_type_)),
    options_(NULL) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

MethodDescriptorProto::~MethodDescriptorProto() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (input_type_ != &_default_input_type_) {
    delete input_type_;
  }
  if (output_type_ != &_default_output_type_) {
    delete output_type_;
  }
  if (this != &default_instance_) {
    delete options_;
  }
}

const ::google::protobuf::Descriptor* MethodDescriptorProto::descriptor() {
  if (MethodDescriptorProto_descriptor_ == NULL) proto_BuildDescriptors_google_2fprotobuf_2fdescriptor_2eproto();
  return MethodDescriptorProto_descriptor_;
}

MethodDescriptorProto* MethodDescriptorProto::New() const {
  return new MethodDescriptorProto;
}

void MethodDescriptorProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (input_type_ != &_default_input_type_) {
        input_type_->clear();
      }
    }
    if (_has_bit(2)) {
      if (output_type_ != &_default_output_type_) {
        output_type_->clear();
      }
    }
    if (_has_bit(3)) {
      if (options_ != NULL) options_->::google::protobuf::MethodOptions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MethodDescriptorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(18)) goto parse_input_type;
        break;
      }
      
      // optional string input_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_input_type:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_input_type()));
        if (input->ExpectTag(26)) goto parse_output_type;
        break;
      }
      
      // optional string output_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_output_type:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_output_type()));
        if (input->ExpectTag(34)) goto parse_options;
        break;
      }
      
      // optional .google.protobuf.MethodOptions options = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_options:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_options()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

bool MethodDescriptorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  // optional string name = 1;
  if (_has_bit(0)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(1, this->name(), output));
  }
  
  // optional string input_type = 2;
  if (_has_bit(1)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(2, this->input_type(), output));
  }
  
  // optional string output_type = 3;
  if (_has_bit(2)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(3, this->output_type(), output));
  }
  
  // optional .google.protobuf.MethodOptions options = 4;
  if (_has_bit(3)) {
    DO_(::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->options(), output));
  }
  
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int MethodDescriptorProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional string input_type = 2;
    if (has_input_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->input_type());
    }
    
    // optional string output_type = 3;
    if (has_output_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->output_type());
    }
    
    // optional .google.protobuf.MethodOptions options = 4;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->options());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MethodDescriptorProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MethodDescriptorProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MethodDescriptorProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(
      descriptor(), *from.GetReflection(), &_reflection_);
  } else {
    MergeFrom(*source);
  }
}

void MethodDescriptorProto::MergeFrom(const MethodDescriptorProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_input_type(from.input_type());
    }
    if (from._has_bit(2)) {
      set_output_type(from.output_type());
    }
    if (from._has_bit(3)) {
      mutable_options()->::google::protobuf::MethodOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MethodDescriptorProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MethodDescriptorProto::CopyFrom(const MethodDescriptorProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MethodDescriptorProto::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* MethodDescriptorProto::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
MethodDescriptorProto::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* MethodDescriptorProto::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const ::google::protobuf::EnumDescriptor* FileOptions_OptimizeMode_descriptor() {
  if (FileOptions_OptimizeMode_descriptor_ == NULL) proto_BuildDescriptors_google_2fprotobuf_2fdescriptor_2eproto();
  return FileOptions_OptimizeMode_descriptor_;
}
bool FileOptions_OptimizeMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FileOptions_OptimizeMode FileOptions::SPEED;
const FileOptions_OptimizeMode FileOptions::CODE_SIZE;
const FileOptions_OptimizeMode FileOptions::OptimizeMode_MIN;
const FileOptions_OptimizeMode FileOptions::OptimizeMode_MAX;
#endif  // _MSC_VER
const FileOptions FileOptions::default_instance_;

const ::std::string FileOptions::_default_java_package_;
const ::std::string FileOptions::_default_java_outer_classname_;


const int FileOptions::_offsets_[4] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileOptions, java_package_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileOptions, java_outer_classname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileOptions, java_multiple_files_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileOptions, optimize_for_),
};

FileOptions::FileOptions()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    java_package_(const_cast< ::std::string*>(&_default_java_package_)),
    java_outer_classname_(const_cast< ::std::string*>(&_default_java_outer_classname_)),
    java_multiple_files_(false),
    optimize_for_(2) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

FileOptions::FileOptions(const FileOptions& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    java_package_(const_cast< ::std::string*>(&_default_java_package_)),
    java_outer_classname_(const_cast< ::std::string*>(&_default_java_outer_classname_)),
    java_multiple_files_(false),
    optimize_for_(2) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

FileOptions::~FileOptions() {
  if (java_package_ != &_default_java_package_) {
    delete java_package_;
  }
  if (java_outer_classname_ != &_default_java_outer_classname_) {
    delete java_outer_classname_;
  }
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* FileOptions::descriptor() {
  if (FileOptions_descriptor_ == NULL) proto_BuildDescriptors_google_2fprotobuf_2fdescriptor_2eproto();
  return FileOptions_descriptor_;
}

FileOptions* FileOptions::New() const {
  return new FileOptions;
}

void FileOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (java_package_ != &_default_java_package_) {
        java_package_->clear();
      }
    }
    if (_has_bit(1)) {
      if (java_outer_classname_ != &_default_java_outer_classname_) {
        java_outer_classname_->clear();
      }
    }
    java_multiple_files_ = false;
    optimize_for_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string java_package = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_java_package()));
        if (input->ExpectTag(66)) goto parse_java_outer_classname;
        break;
      }
      
      // optional string java_outer_classname = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_java_outer_classname:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_java_outer_classname()));
        if (input->ExpectTag(72)) goto parse_optimize_for;
        break;
      }
      
      // optional .google.protobuf.FileOptions.OptimizeMode optimize_for = 9 [default = CODE_SIZE];
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_optimize_for:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (::google::protobuf::FileOptions_OptimizeMode_IsValid(value)) {
          set_optimize_for(static_cast< ::google::protobuf::FileOptions_OptimizeMode >(value));
        } else {
          mutable_unknown_fields()->AddField(9)->add_varint(value);
        }
        if (input->ExpectTag(80)) goto parse_java_multiple_files;
        break;
      }
      
      // optional bool java_multiple_files = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_java_multiple_files:
        DO_(::google::protobuf::internal::WireFormat::ReadBool(
              input, &java_multiple_files_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

bool FileOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  // optional string java_package = 1;
  if (_has_bit(0)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(1, this->java_package(), output));
  }
  
  // optional string java_outer_classname = 8;
  if (_has_bit(1)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(8, this->java_outer_classname(), output));
  }
  
  // optional .google.protobuf.FileOptions.OptimizeMode optimize_for = 9 [default = CODE_SIZE];
  if (_has_bit(3)) {
    DO_(::google::protobuf::internal::WireFormat::WriteEnum(9, this->optimize_for(), output));
  }
  
  // optional bool java_multiple_files = 10 [default = false];
  if (_has_bit(2)) {
    DO_(::google::protobuf::internal::WireFormat::WriteBool(10, this->java_multiple_files(), output));
  }
  
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int FileOptions::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string java_package = 1;
    if (has_java_package()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->java_package());
    }
    
    // optional string java_outer_classname = 8;
    if (has_java_outer_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->java_outer_classname());
    }
    
    // optional bool java_multiple_files = 10 [default = false];
    if (has_java_multiple_files()) {
      total_size += 1 + 1;
    }
    
    // optional .google.protobuf.FileOptions.OptimizeMode optimize_for = 9 [default = CODE_SIZE];
    if (has_optimize_for()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->optimize_for());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void FileOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(
      descriptor(), *from.GetReflection(), &_reflection_);
  } else {
    MergeFrom(*source);
  }
}

void FileOptions::MergeFrom(const FileOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_java_package(from.java_package());
    }
    if (from._has_bit(1)) {
      set_java_outer_classname(from.java_outer_classname());
    }
    if (from._has_bit(2)) {
      set_java_multiple_files(from.java_multiple_files());
    }
    if (from._has_bit(3)) {
      set_optimize_for(from.optimize_for());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileOptions::CopyFrom(const FileOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileOptions::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* FileOptions::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
FileOptions::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* FileOptions::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const MessageOptions MessageOptions::default_instance_;


const int MessageOptions::_offsets_[1] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageOptions, message_set_wire_format_),
};

MessageOptions::MessageOptions()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    message_set_wire_format_(false) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

MessageOptions::MessageOptions(const MessageOptions& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    message_set_wire_format_(false) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

MessageOptions::~MessageOptions() {
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MessageOptions::descriptor() {
  if (MessageOptions_descriptor_ == NULL) proto_BuildDescriptors_google_2fprotobuf_2fdescriptor_2eproto();
  return MessageOptions_descriptor_;
}

MessageOptions* MessageOptions::New() const {
  return new MessageOptions;
}

void MessageOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_set_wire_format_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional bool message_set_wire_format = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBool(
              input, &message_set_wire_format_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

bool MessageOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  // optional bool message_set_wire_format = 1 [default = false];
  if (_has_bit(0)) {
    DO_(::google::protobuf::internal::WireFormat::WriteBool(1, this->message_set_wire_format(), output));
  }
  
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int MessageOptions::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool message_set_wire_format = 1 [default = false];
    if (has_message_set_wire_format()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MessageOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(
      descriptor(), *from.GetReflection(), &_reflection_);
  } else {
    MergeFrom(*source);
  }
}

void MessageOptions::MergeFrom(const MessageOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_message_set_wire_format(from.message_set_wire_format());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageOptions::CopyFrom(const MessageOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOptions::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* MessageOptions::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
MessageOptions::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* MessageOptions::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const ::google::protobuf::EnumDescriptor* FieldOptions_CType_descriptor() {
  if (FieldOptions_CType_descriptor_ == NULL) proto_BuildDescriptors_google_2fprotobuf_2fdescriptor_2eproto();
  return FieldOptions_CType_descriptor_;
}
bool FieldOptions_CType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FieldOptions_CType FieldOptions::CORD;
const FieldOptions_CType FieldOptions::STRING_PIECE;
const FieldOptions_CType FieldOptions::CType_MIN;
const FieldOptions_CType FieldOptions::CType_MAX;
#endif  // _MSC_VER
const FieldOptions FieldOptions::default_instance_;


const ::std::string FieldOptions::_default_experimental_map_key_;
const int FieldOptions::_offsets_[2] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldOptions, ctype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldOptions, experimental_map_key_),
};

FieldOptions::FieldOptions()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    ctype_(1),
    experimental_map_key_(const_cast< ::std::string*>(&_default_experimental_map_key_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

FieldOptions::FieldOptions(const FieldOptions& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0),
    ctype_(1),
    experimental_map_key_(const_cast< ::std::string*>(&_default_experimental_map_key_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

FieldOptions::~FieldOptions() {
  if (experimental_map_key_ != &_default_experimental_map_key_) {
    delete experimental_map_key_;
  }
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* FieldOptions::descriptor() {
  if (FieldOptions_descriptor_ == NULL) proto_BuildDescriptors_google_2fprotobuf_2fdescriptor_2eproto();
  return FieldOptions_descriptor_;
}

FieldOptions* FieldOptions::New() const {
  return new FieldOptions;
}

void FieldOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ctype_ = 1;
    if (_has_bit(1)) {
      if (experimental_map_key_ != &_default_experimental_map_key_) {
        experimental_map_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FieldOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .google.protobuf.FieldOptions.CType ctype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (::google::protobuf::FieldOptions_CType_IsValid(value)) {
          set_ctype(static_cast< ::google::protobuf::FieldOptions_CType >(value));
        } else {
          mutable_unknown_fields()->AddField(1)->add_varint(value);
        }
        if (input->ExpectTag(74)) goto parse_experimental_map_key;
        break;
      }
      
      // optional string experimental_map_key = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_experimental_map_key:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_experimental_map_key()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

bool FieldOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  // optional .google.protobuf.FieldOptions.CType ctype = 1;
  if (_has_bit(0)) {
    DO_(::google::protobuf::internal::WireFormat::WriteEnum(1, this->ctype(), output));
  }
  
  // optional string experimental_map_key = 9;
  if (_has_bit(1)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(9, this->experimental_map_key(), output));
  }
  
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int FieldOptions::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .google.protobuf.FieldOptions.CType ctype = 1;
    if (has_ctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->ctype());
    }
    
    // optional string experimental_map_key = 9;
    if (has_experimental_map_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->experimental_map_key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void FieldOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FieldOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FieldOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(
      descriptor(), *from.GetReflection(), &_reflection_);
  } else {
    MergeFrom(*source);
  }
}

void FieldOptions::MergeFrom(const FieldOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ctype(from.ctype());
    }
    if (from._has_bit(1)) {
      set_experimental_map_key(from.experimental_map_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FieldOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldOptions::CopyFrom(const FieldOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldOptions::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* FieldOptions::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
FieldOptions::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* FieldOptions::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const EnumOptions EnumOptions::default_instance_;

const int EnumOptions::_offsets_[1] = {
};

EnumOptions::EnumOptions()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

EnumOptions::EnumOptions(const EnumOptions& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

EnumOptions::~EnumOptions() {
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* EnumOptions::descriptor() {
  if (EnumOptions_descriptor_ == NULL) proto_BuildDescriptors_google_2fprotobuf_2fdescriptor_2eproto();
  return EnumOptions_descriptor_;
}

EnumOptions* EnumOptions::New() const {
  return new EnumOptions;
}

void EnumOptions::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnumOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

bool EnumOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int EnumOptions::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void EnumOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void EnumOptions::MergeFrom(const EnumOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnumOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnumOptions::CopyFrom(const EnumOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnumOptions::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* EnumOptions::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
EnumOptions::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* EnumOptions::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const EnumValueOptions EnumValueOptions::default_instance_;

const int EnumValueOptions::_offsets_[1] = {
};

EnumValueOptions::EnumValueOptions()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

EnumValueOptions::EnumValueOptions(const EnumValueOptions& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

EnumValueOptions::~EnumValueOptions() {
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* EnumValueOptions::descriptor() {
  if (EnumValueOptions_descriptor_ == NULL) proto_BuildDescriptors_google_2fprotobuf_2fdescriptor_2eproto();
  return EnumValueOptions_descriptor_;
}

EnumValueOptions* EnumValueOptions::New() const {
  return new EnumValueOptions;
}

void EnumValueOptions::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnumValueOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

bool EnumValueOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int EnumValueOptions::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void EnumValueOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void EnumValueOptions::MergeFrom(const EnumValueOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnumValueOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnumValueOptions::CopyFrom(const EnumValueOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnumValueOptions::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* EnumValueOptions::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
EnumValueOptions::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* EnumValueOptions::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const ServiceOptions ServiceOptions::default_instance_;

const int ServiceOptions::_offsets_[1] = {
};

ServiceOptions::ServiceOptions()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

ServiceOptions::ServiceOptions(const ServiceOptions& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

ServiceOptions::~ServiceOptions() {
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ServiceOptions::descriptor() {
  if (ServiceOptions_descriptor_ == NULL) proto_BuildDescriptors_google_2fprotobuf_2fdescriptor_2eproto();
  return ServiceOptions_descriptor_;
}

ServiceOptions* ServiceOptions::New() const {
  return new ServiceOptions;
}

void ServiceOptions::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

bool ServiceOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int ServiceOptions::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ServiceOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void ServiceOptions::MergeFrom(const ServiceOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceOptions::CopyFrom(const ServiceOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceOptions::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* ServiceOptions::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
ServiceOptions::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* ServiceOptions::GetReflection() {
  return &_reflection_;
}

// ===================================================================

const MethodOptions MethodOptions::default_instance_;

const int MethodOptions::_offsets_[1] = {
};

MethodOptions::MethodOptions()
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

MethodOptions::MethodOptions(const MethodOptions& from)
  : _reflection_(descriptor(),
                 this, &default_instance_,
                 _offsets_, _has_bits_, NULL),
    _cached_size_(0) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

MethodOptions::~MethodOptions() {
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MethodOptions::descriptor() {
  if (MethodOptions_descriptor_ == NULL) proto_BuildDescriptors_google_2fprotobuf_2fdescriptor_2eproto();
  return MethodOptions_descriptor_;
}

MethodOptions* MethodOptions::New() const {
  return new MethodOptions;
}

void MethodOptions::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MethodOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

bool MethodOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int MethodOptions::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MethodOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void MethodOptions::MergeFrom(const MethodOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MethodOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MethodOptions::CopyFrom(const MethodOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MethodOptions::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* MethodOptions::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Message::Reflection*
MethodOptions::GetReflection() const {
  return &_reflection_;
}

::google::protobuf::Message::Reflection* MethodOptions::GetReflection() {
  return &_reflection_;
}

}  // namespace protobuf
}  // namespace google
